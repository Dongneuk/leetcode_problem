class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if nums[i] + nums[j] == target:
                    return [i, j]
                
        return false

# 시간복잡도: list를 두번 전체 돌기 때문에, O(n^2) 이 나온다.




# Second solution
class Solution(object):
    def twoSum(self, nums, target):
        """
        :type nums: List[int]
        :type target: int
        :rtype: List[int]
        """
        
        dict = {}
        
        for i in range(len(nums)):
            complement = target - nums[i]
            if complement in dict:
                return [i, dict[complement]]
            dict[nums[i]] = i
            

# 시간복잡도: list를 한번 돌기 때문에, O(n). dict의 요소를 찾아보는 비용은 오직 O(1).

        